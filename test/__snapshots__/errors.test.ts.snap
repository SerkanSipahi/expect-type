// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`usage test 1`] = `
"test/usage.test.ts:999:999 - error TS2554: Expected 1 arguments, but got 0.

999   expectTypeOf({a: 1, b: 1}).toEqualTypeOf<{a: number}>()
                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  src/index.ts:999:999
    999     <Expected>(...MISMATCH: MismatchArgs<Equal<Actual, Expected, Options['branded']>, Options['positive']>): true
                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Arguments for the rest parameter 'MISMATCH' were not provided.
test/usage.test.ts:999:999 - error TS2554: Expected 1 arguments, but got 0.

999   expectTypeOf<Fruit>().toMatchTypeOf<Apple>()
                            ~~~~~~~~~~~~~~~~~~~~~~

  src/index.ts:999:999
    999     <Expected>(...MISMATCH: MismatchArgs<Extends<Actual, Expected>, Options['positive']>): true
                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Arguments for the rest parameter 'MISMATCH' were not provided.
test/usage.test.ts:999:999 - error TS2554: Expected 1 arguments, but got 0.

999   expectTypeOf<Apple>().toEqualTypeOf<Fruit>()
                            ~~~~~~~~~~~~~~~~~~~~~~

  src/index.ts:999:999
    999     <Expected>(...MISMATCH: MismatchArgs<Equal<Actual, Expected, Options['branded']>, Options['positive']>): true
                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Arguments for the rest parameter 'MISMATCH' were not provided.
test/usage.test.ts:999:999 - error TS2554: Expected 2 arguments, but got 1.

999   expectTypeOf({a: 1}).toMatchTypeOf({b: 1})
                           ~~~~~~~~~~~~~~~~~~~~~

  src/index.ts:999:999
    999     <Expected>(expected: Expected, ...MISMATCH: MismatchArgs<Extends<Actual, Expected>, Options['positive']>): true
                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Arguments for the rest parameter 'MISMATCH' were not provided.
test/usage.test.ts:999:999 - error TS2554: Expected 1 arguments, but got 0.

999   expectTypeOf<Fruit>().toMatchTypeOf<Apple>()
                            ~~~~~~~~~~~~~~~~~~~~~~

  src/index.ts:999:999
    999     <Expected>(...MISMATCH: MismatchArgs<Extends<Actual, Expected>, Options['positive']>): true
                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Arguments for the rest parameter 'MISMATCH' were not provided.
test/usage.test.ts:999:999 - error TS2554: Expected 1 arguments, but got 0.

999   expectTypeOf<Apple>().toEqualTypeOf<Fruit>()
                            ~~~~~~~~~~~~~~~~~~~~~~

  src/index.ts:999:999
    999     <Expected>(...MISMATCH: MismatchArgs<Equal<Actual, Expected, Options['branded']>, Options['positive']>): true
                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Arguments for the rest parameter 'MISMATCH' were not provided.
test/usage.test.ts:999:999 - error TS2554: Expected 1 arguments, but got 0.

999   expectTypeOf<never>().toBeNumber()
                            ~~~~~~~~~~~~

  src/index.ts:999:999
    999   toBeNumber: (...MISMATCH: MismatchArgs<Extends<Actual, number>, Options['positive']>) => true
                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Arguments for the rest parameter 'MISMATCH' were not provided.
test/usage.test.ts:999:999 - error TS2554: Expected 1 arguments, but got 0.

999   expectTypeOf<{deeply: {nested: any}}>().toEqualTypeOf<{deeply: {nested: unknown}}>()
                                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  src/index.ts:999:999
    999     <Expected>(...MISMATCH: MismatchArgs<Equal<Actual, Expected, Options['branded']>, Options['positive']>): true
                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Arguments for the rest parameter 'MISMATCH' were not provided.
test/usage.test.ts:999:999 - error TS2554: Expected 1 arguments, but got 0.

999   expectTypeOf(undefined).toBeNull()
                              ~~~~~~~~~~

  src/index.ts:999:999
    999   toBeNull: (...MISMATCH: MismatchArgs<Extends<Actual, null>, Options['positive']>) => true
                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Arguments for the rest parameter 'MISMATCH' were not provided.
test/usage.test.ts:999:999 - error TS2554: Expected 1 arguments, but got 0.

999   expectTypeOf(null).toBeUndefined()
                         ~~~~~~~~~~~~~~~

  src/index.ts:999:999
    999   toBeUndefined: (...MISMATCH: MismatchArgs<Extends<Actual, undefined>, Options['positive']>) => true
                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Arguments for the rest parameter 'MISMATCH' were not provided.
test/usage.test.ts:999:999 - error TS2554: Expected 1 arguments, but got 0.

999   expectTypeOf(1).toBeUnknown()
                      ~~~~~~~~~~~~~

  src/index.ts:999:999
    999   toBeUnknown: (...MISMATCH: MismatchArgs<IsUnknown<Actual>, Options['positive']>) => true
                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Arguments for the rest parameter 'MISMATCH' were not provided.
test/usage.test.ts:999:999 - error TS2554: Expected 1 arguments, but got 0.

999   expectTypeOf(1).toBeAny()
                      ~~~~~~~~~

  src/index.ts:999:999
    999   toBeAny: (...MISMATCH: MismatchArgs<IsAny<Actual>, Options['positive']>) => true
                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Arguments for the rest parameter 'MISMATCH' were not provided.
test/usage.test.ts:999:999 - error TS2554: Expected 1 arguments, but got 0.

999   expectTypeOf(1).toBeNever()
                      ~~~~~~~~~~~

  src/index.ts:999:999
    999   toBeNever: (...MISMATCH: MismatchArgs<IsNever<Actual>, Options['positive']>) => true
                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Arguments for the rest parameter 'MISMATCH' were not provided.
test/usage.test.ts:999:999 - error TS2554: Expected 1 arguments, but got 0.

999   expectTypeOf(1).toBeNull()
                      ~~~~~~~~~~

  src/index.ts:999:999
    999   toBeNull: (...MISMATCH: MismatchArgs<Extends<Actual, null>, Options['positive']>) => true
                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Arguments for the rest parameter 'MISMATCH' were not provided.
test/usage.test.ts:999:999 - error TS2554: Expected 1 arguments, but got 0.

999   expectTypeOf(1).toBeUndefined()
                      ~~~~~~~~~~~~~~~

  src/index.ts:999:999
    999   toBeUndefined: (...MISMATCH: MismatchArgs<Extends<Actual, undefined>, Options['positive']>) => true
                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Arguments for the rest parameter 'MISMATCH' were not provided.
test/usage.test.ts:999:999 - error TS2554: Expected 1 arguments, but got 0.

999   expectTypeOf(1).toBeNullable()
                      ~~~~~~~~~~~~~~

  src/index.ts:999:999
    999     ...MISMATCH: MismatchArgs<Not<Equal<Actual, NonNullable<Actual>, Options['branded']>>, Options['positive']>
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Arguments for the rest parameter 'MISMATCH' were not provided.
test/usage.test.ts:999:999 - error TS2554: Expected 1 arguments, but got 0.

999   expectTypeOf<string | number>().toMatchTypeOf<number>()
                                      ~~~~~~~~~~~~~~~~~~~~~~~

  src/index.ts:999:999
    999     <Expected>(...MISMATCH: MismatchArgs<Extends<Actual, Expected>, Options['positive']>): true
                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Arguments for the rest parameter 'MISMATCH' were not provided.
test/usage.test.ts:999:999 - error TS2554: Expected 2 arguments, but got 1.

999   expectTypeOf<ResponsiveProp<number>>().exclude<number | number[]>().toHaveProperty('xxl')
                                                                          ~~~~~~~~~~~~~~~~~~~~~

  src/index.ts:999:999
    999     ...MISMATCH: MismatchArgs<Extends<K, keyof Actual>, Options['positive']>
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Arguments for the rest parameter 'MISMATCH' were not provided.
test/usage.test.ts:999:999 - error TS2554: Expected 2 arguments, but got 1.

999   expectTypeOf(obj).toHaveProperty('c')
                        ~~~~~~~~~~~~~~~~~~~

  src/index.ts:999:999
    999     ...MISMATCH: MismatchArgs<Extends<K, keyof Actual>, Options['positive']>
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Arguments for the rest parameter 'MISMATCH' were not provided.
test/usage.test.ts:999:999 - error TS2554: Expected 1 arguments, but got 0.

999   expectTypeOf(obj).toHaveProperty('a').toBeString()
                                            ~~~~~~~~~~~~

  src/index.ts:999:999
    999   toBeString: (...MISMATCH: MismatchArgs<Extends<Actual, string>, Options['positive']>) => true
                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Arguments for the rest parameter 'MISMATCH' were not provided.
test/usage.test.ts:999:999 - error TS2554: Expected 1 arguments, but got 0.

999   expectTypeOf<NoParam>().toEqualTypeOf<HasParam>()
                              ~~~~~~~~~~~~~~~~~~~~~~~~~

  src/index.ts:999:999
    999     <Expected>(...MISMATCH: MismatchArgs<Equal<Actual, Expected, Options['branded']>, Options['positive']>): true
                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Arguments for the rest parameter 'MISMATCH' were not provided.
test/usage.test.ts:999:999 - error TS2554: Expected 1 arguments, but got 0.

999   expectTypeOf(f).toBeAny()
                      ~~~~~~~~~

  src/index.ts:999:999
    999   toBeAny: (...MISMATCH: MismatchArgs<IsAny<Actual>, Options['positive']>) => true
                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Arguments for the rest parameter 'MISMATCH' were not provided.
test/usage.test.ts:999:999 - error TS2554: Expected 1 arguments, but got 0.

999   expectTypeOf(f).returns.toBeAny()
                              ~~~~~~~~~

  src/index.ts:999:999
    999   toBeAny: (...MISMATCH: MismatchArgs<IsAny<Actual>, Options['positive']>) => true
                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Arguments for the rest parameter 'MISMATCH' were not provided.
test/usage.test.ts:999:999 - error TS2345: Argument of type 'string' is not assignable to parameter of type 'never'.

999   expectTypeOf(f).parameter(0).toEqualTypeOf('1')
                                                 ~~~
test/usage.test.ts:999:999 - error TS2345: Argument of type '(this: { name: string; }, message: string) => string' is not assignable to parameter of type 'never'.

999   expectTypeOf(greetFormal).toEqualTypeOf(greetCasual)
                                              ~~~~~~~~~~~
test/usage.test.ts:999:999 - error TS2554: Expected 1 arguments, but got 0.

999   expectTypeOf([1, 2, 3]).items.toBeString()
                                    ~~~~~~~~~~~~

  src/index.ts:999:999
    999   toBeString: (...MISMATCH: MismatchArgs<Extends<Actual, string>, Options['positive']>) => true
                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Arguments for the rest parameter 'MISMATCH' were not provided.
test/usage.test.ts:999:999 - error TS2554: Expected 1 arguments, but got 0.

999   expectTypeOf<any[]>().toEqualTypeOf<number[]>()
                            ~~~~~~~~~~~~~~~~~~~~~~~~~

  src/index.ts:999:999
    999     <Expected>(...MISMATCH: MismatchArgs<Equal<Actual, Expected, Options['branded']>, Options['positive']>): true
                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Arguments for the rest parameter 'MISMATCH' were not provided.
test/usage.test.ts:999:999 - error TS2554: Expected 1 arguments, but got 0.

999   expectTypeOf<{a: string}>().toEqualTypeOf<{a: number}>()
                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  src/index.ts:999:999
    999     <Expected>(...MISMATCH: MismatchArgs<Equal<Actual, Expected, Options['branded']>, Options['positive']>): true
                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Arguments for the rest parameter 'MISMATCH' were not provided.
test/usage.test.ts:999:999 - error TS2554: Expected 1 arguments, but got 0.

999   expectTypeOf<{a?: number}>().toEqualTypeOf<{}>()
                                   ~~~~~~~~~~~~~~~~~~~

  src/index.ts:999:999
    999     <Expected>(...MISMATCH: MismatchArgs<Equal<Actual, Expected, Options['branded']>, Options['positive']>): true
                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Arguments for the rest parameter 'MISMATCH' were not provided.
test/usage.test.ts:999:999 - error TS2554: Expected 1 arguments, but got 0.

999   expectTypeOf<{a?: number}>().toEqualTypeOf<{a: number}>()
                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  src/index.ts:999:999
    999     <Expected>(...MISMATCH: MismatchArgs<Equal<Actual, Expected, Options['branded']>, Options['positive']>): true
                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Arguments for the rest parameter 'MISMATCH' were not provided.
test/usage.test.ts:999:999 - error TS2554: Expected 1 arguments, but got 0.

999   expectTypeOf<{a?: number}>().toEqualTypeOf<{a: number | undefined}>()
                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  src/index.ts:999:999
    999     <Expected>(...MISMATCH: MismatchArgs<Equal<Actual, Expected, Options['branded']>, Options['positive']>): true
                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Arguments for the rest parameter 'MISMATCH' were not provided.
test/usage.test.ts:999:999 - error TS2554: Expected 1 arguments, but got 0.

999   expectTypeOf<{a?: number | null}>().toEqualTypeOf<{a: number | null}>()
                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  src/index.ts:999:999
    999     <Expected>(...MISMATCH: MismatchArgs<Equal<Actual, Expected, Options['branded']>, Options['positive']>): true
                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Arguments for the rest parameter 'MISMATCH' were not provided.
test/usage.test.ts:999:999 - error TS2554: Expected 1 arguments, but got 0.

999   expectTypeOf<{a: {b?: number}}>().toEqualTypeOf<{a: {}}>()
                                        ~~~~~~~~~~~~~~~~~~~~~~~~

  src/index.ts:999:999
    999     <Expected>(...MISMATCH: MismatchArgs<Equal<Actual, Expected, Options['branded']>, Options['positive']>): true
                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Arguments for the rest parameter 'MISMATCH' were not provided.
test/usage.test.ts:999:999 - error TS2554: Expected 1 arguments, but got 0.

999   expectTypeOf<A1>().toEqualTypeOf<E1>()
                         ~~~~~~~~~~~~~~~~~~~

  src/index.ts:999:999
    999     <Expected>(...MISMATCH: MismatchArgs<Equal<Actual, Expected, Options['branded']>, Options['positive']>): true
                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Arguments for the rest parameter 'MISMATCH' were not provided.
test/usage.test.ts:999:999 - error TS2554: Expected 1 arguments, but got 0.

999   expectTypeOf<A2>().toEqualTypeOf<E2>()
                         ~~~~~~~~~~~~~~~~~~~

  src/index.ts:999:999
    999     <Expected>(...MISMATCH: MismatchArgs<Equal<Actual, Expected, Options['branded']>, Options['positive']>): true
                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Arguments for the rest parameter 'MISMATCH' were not provided.
test/usage.test.ts:999:999 - error TS2554: Expected 1 arguments, but got 0.

999   expectTypeOf<typeof A>().toEqualTypeOf<typeof B>()
                               ~~~~~~~~~~~~~~~~~~~~~~~~~

  src/index.ts:999:999
    999     <Expected>(...MISMATCH: MismatchArgs<Equal<Actual, Expected, Options['branded']>, Options['positive']>): true
                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Arguments for the rest parameter 'MISMATCH' were not provided.
test/usage.test.ts:999:999 - error TS2554: Expected 1 arguments, but got 0.

999   expectTypeOf<{a: 1} & {b: 2}>().toEqualTypeOf<{a: 1; b: 2}>()
                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  src/index.ts:999:999
    999     <Expected>(...MISMATCH: MismatchArgs<Equal<Actual, Expected, Options['branded']>, Options['positive']>): true
                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Arguments for the rest parameter 'MISMATCH' were not provided."
`;
